import { Component, OnInit } from '@angular/core';
import api from 'zotero-api-client';
import { environment } from '../../../environments/environment';
import { ICollectionsNav } from './ICollectionsNav';
import { MatDialog } from '@angular/material/dialog';
import { ZoteroDialogContComponent } from './zotero-dialog-cont/zotero-dialog-cont.component';

@Component({
  selector: 'app-zotero',
  templateUrl: './zotero.component.html',
  styleUrls: ['./zotero.component.css']
})
export class ZoteroComponent implements OnInit {

  response: any;
  auth_key = environment.auth_key;
  group = environment.group;
  collectionsNav: ICollectionsNav[];
  collectionName: string;
  zoteroItems: any;
  hideLoadingCollections = true;
  hideLoadingItems = true;

  constructor(public dialog: MatDialog) { }

  ngOnInit(): void {
    this.getCollections();
  }

  getCollections() {
    this.hideLoadingCollections = false;
    var collections = [];

    this.response = api(this.auth_key).library('group', this.group).collections().get({ limit: 1000 });
    this.response.then(data => {
      collections = data.raw;
      this.collectionsNav = this.sortCollectionsKeys(collections);
      this.collectionsNav = this.getNestedChildren(this.collectionsNav, false);
      this.collectionsNav = this.sortCollectionsNames(this.collectionsNav);
      this.hideLoadingCollections = true;
    });

  }

  getCollectionItems(collectionKey) {
    var arr = [];
    this.hideLoadingItems = false;
    this.zoteroItems = [];

    this.response = api(this.auth_key).library('group', this.group).collections(collectionKey).items().get();
    this.response.then(data => {
      arr = data.raw;

      arr.sort(function(a, b) {
        if (typeof a.data.title != 'undefined' && typeof b.data.title != 'undefined') {
          var textA = a.data.title.toUpperCase();
          var textB = b.data.title.toUpperCase();
          return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
        }
        else {
          return 0;
        }
      });

      this.zoteroItems = arr;
      this.collateItemChildren();
      console.log(this.zoteroItems);

      this.hideLoadingItems = true;
    });
  }

  zoteroQueryTest() {
    this.response = api(this.auth_key).library('group', this.group).itemTypes().get();
    this.response.then(data => {
      console.log(data);
    });

  }

  sortCollectionsKeys(arr) {
    arr.sort(function(a, b) {
        var textA = a.data.parentCollection;
        var textB = b.data.parentCollection;
        return (textA == false) ? -1 : 0;
    });

    return arr;
  }

  sortCollectionsNames(arr) {
    arr.sort(function(a, b) {
        var textA = a.name.toLowerCase();
        var textB = b.name.toLowerCase();
        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
    });

    return arr;
  }

  getNestedChildren(arr, parent) {  // type array, string
    var out = [];

    for(var i in arr) {
      // console.log(arr[i].data.parentCollection + ' : ' + arr[i].data.name);
      if(arr[i].data.parentCollection == parent) {
        var outVar: ICollectionsNav = {
          key: arr[i].data.key,
          name: arr[i].data.name
        }

        var children = this.getNestedChildren(arr, arr[i].data.key);

        if (children?.length) {
          children.sort(function(a, b) {
              var textA = a.name;
              var textB = b.name;
              return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
          });

          outVar.children = children;
        }

        out.push(outVar);

      }
    }

    return out;
  }

  collateItemChildren() {
    this.zoteroItems.forEach(item => {
      if (typeof item.data.parentItem == 'undefined') {
        item.childItems = [];
        this.zoteroItems.forEach(innerItem => {
          if (innerItem.data.parentItem == item.key) {
            item.childItems.push(innerItem);
          }
        });
      }
    });
  }

  checkType(type) {
    switch (type) {
      case 'attachment':
        return false;
        break;
      case 'note':
        return false;
        break;
      default:
        return true;
        break;
    }
  }

  openItemDialog(item) {
    var selectedItem = item;
    let dialogRef = this.dialog.open(ZoteroDialogContComponent, {
      data: selectedItem
    });

  }

}
